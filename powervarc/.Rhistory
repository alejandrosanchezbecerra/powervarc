results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
varCov <- data$outcome
return(reject)
}
results <- lapply(rep(0,100),simulate_test)
mean(unlist(results))
# Diagnostic Statistics
# sum(sample_data_transform$treatment)
#
# table(sample_data_transform$treatment)
# table(sample_data_transform$treatment,sample_data_transform$treatment_tilde)
# table(sample_data_transform$clustervar,sample_data_transform$treatment)
#
# table(sample_data_transform$clustervar,sample_data_transform$rand_clusters)
# table(sample_data_transform$clustervar,sample_data_transform$rand_obs)
library('plm')
library('lmtest')
library('multiwayvcov')
library('miceadds')
#' Randomly assign units to treatment and control groups
#'
#' @param data The dataset to be used
#' @param clustervar The cluster identifier
#' @param p_cluster  The probability that a cluster will be assigned to treatment
#' @param p_individual The probability that an individual will be assigned to treatment
#' for treated individuals
#' @param p_spillover The probability that a control observation in an assigned
#' cluster will be classified as effectively treated.
#' @param
#'
#' @return A dataset with the treatment variables
#' @export
#'
#' @examples
sample_randomize <- function(data,clustervar,p_vec) {
# Extract parameters of interest
p_cluster       <- p_vec[1]
p_individual    <- p_vec[2]
p_spillover     <- p_vec[3]
p_noncompliance <- p_vec[4]
# Identify unique clusters
cluster_id <- data[,c(clustervar)]
unique_cluster_id <- unique(cluster_id)
# Identify number of observations
num_obs      <- dim(data)[1]
num_clusters <- length(unique_cluster_id)
# Randomize
rand_obs      <- rbinom(num_obs,1,p_individual)
rand_clusters <- rbinom(num_clusters,1,p_cluster)
treatment_cluster <- as.data.frame(cbind(unique_cluster_id,rand_clusters))
data <- merge(data,treatment_cluster,by.x=clustervar,by.y="unique_cluster_id")
data$rand_obs  <- rand_obs
data$treatment <- (data$rand_obs)*(data$rand_clusters)
rand_spillover     <- rbinom(num_obs,1,p_spillover)
rand_noncompliance <- rbinom(num_obs,1,1-p_noncompliance)
data$treatment_tilde <- (data$rand_obs)*(data$rand_clusters)*rand_noncompliance +
(1-data$rand_obs)*(data$rand_clusters)*rand_spillover
return(data)
}
sample_outcome <- function(data,treatment_tilde,clustervar,param) {
cluster_id <- data[,c(clustervar)]
unique_cluster_id <- unique(cluster_id)
num_obs      <- dim(data)[1]
num_clusters <- length(unique_cluster_id)
beta    <- param[1]
sigma_e <- param[2]
sigma_u <- param[3]
rand_e <- rnorm(num_obs,0,sigma_e)
rand_u <- rnorm(num_clusters,0,sigma_u)
rand_cluster <- as.data.frame(cbind(unique_cluster_id,rand_u))
data <- merge(data,rand_cluster,by.x=clustervar,by.y="unique_cluster_id")
data$outcome <- data[,c(treatment_tilde)]*beta + data$rand_u + rand_e
return(data)
}
sample_cluster <- function(clustervar,cluster_num,cluster_size) {
unique_cluster_id <- (1:cluster_num)
data <- as.data.frame(kronecker(unique_cluster_id,seq(1,1,length.out=cluster_size)))
names(data) <- c(clustervar)
return(data)
}
simulate_test <- function(s) {
# Simulation parameters
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 100
cluster_size <- 1000
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_outcome(sample_data_transform,'treatment_tilde','clustervar',param)
# Carry out hypothesis test
results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
varCov <- data$outcome
return(reject)
}
results <- lapply(rep(0,100),simulate_test)
mean(unlist(results))
# Diagnostic Statistics
# sum(sample_data_transform$treatment)
#
# table(sample_data_transform$treatment)
# table(sample_data_transform$treatment,sample_data_transform$treatment_tilde)
# table(sample_data_transform$clustervar,sample_data_transform$treatment)
#
# table(sample_data_transform$clustervar,sample_data_transform$rand_clusters)
# table(sample_data_transform$clustervar,sample_data_transform$rand_obs)
library('plm')
library('lmtest')
library('multiwayvcov')
library('miceadds')
#' Randomly assign units to treatment and control groups
#'
#' @param data The dataset to be used
#' @param clustervar The cluster identifier
#' @param p_cluster  The probability that a cluster will be assigned to treatment
#' @param p_individual The probability that an individual will be assigned to treatment
#' for treated individuals
#' @param p_spillover The probability that a control observation in an assigned
#' cluster will be classified as effectively treated.
#' @param
#'
#' @return A dataset with the treatment variables
#' @export
#'
#' @examples
sample_randomize <- function(data,clustervar,p_vec) {
# Extract parameters of interest
p_cluster       <- p_vec[1]
p_individual    <- p_vec[2]
p_spillover     <- p_vec[3]
p_noncompliance <- p_vec[4]
# Identify unique clusters
cluster_id <- data[,c(clustervar)]
unique_cluster_id <- unique(cluster_id)
# Identify number of observations
num_obs      <- dim(data)[1]
num_clusters <- length(unique_cluster_id)
# Randomize
rand_obs      <- rbinom(num_obs,1,p_individual)
rand_clusters <- rbinom(num_clusters,1,p_cluster)
treatment_cluster <- as.data.frame(cbind(unique_cluster_id,rand_clusters))
data <- merge(data,treatment_cluster,by.x=clustervar,by.y="unique_cluster_id")
data$rand_obs  <- rand_obs
data$treatment <- (data$rand_obs)*(data$rand_clusters)
rand_spillover     <- rbinom(num_obs,1,p_spillover)
rand_noncompliance <- rbinom(num_obs,1,1-p_noncompliance)
data$treatment_tilde <- (data$rand_obs)*(data$rand_clusters)*rand_noncompliance +
(1-data$rand_obs)*(data$rand_clusters)*rand_spillover
return(data)
}
sample_outcome <- function(data,treatment_tilde,clustervar,param) {
cluster_id <- data[,c(clustervar)]
unique_cluster_id <- unique(cluster_id)
num_obs      <- dim(data)[1]
num_clusters <- length(unique_cluster_id)
beta    <- param[1]
sigma_e <- param[2]
sigma_u <- param[3]
rand_e <- rnorm(num_obs,0,sigma_e)
rand_u <- rnorm(num_clusters,0,sigma_u)
rand_cluster <- as.data.frame(cbind(unique_cluster_id,rand_u))
data <- merge(data,rand_cluster,by.x=clustervar,by.y="unique_cluster_id")
data$outcome <- data[,c(treatment_tilde)]*beta + data$rand_u + rand_e
return(data)
}
sample_cluster <- function(clustervar,cluster_num,cluster_size) {
unique_cluster_id <- (1:cluster_num)
data <- as.data.frame(kronecker(unique_cluster_id,seq(1,1,length.out=cluster_size)))
names(data) <- c(clustervar)
return(data)
}
simulate_test <- function(s) {
# Simulation parameters
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 100
cluster_size <- 1000
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_outcome(sample_data_transform,'treatment_tilde','clustervar',param)
# Carry out hypothesis test
results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
varCov <- data$outcome
return(reject)
}
results <- lapply(rep(0,100),simulate_test)
mean(unlist(results))
# Diagnostic Statistics
# sum(sample_data_transform$treatment)
#
# table(sample_data_transform$treatment)
# table(sample_data_transform$treatment,sample_data_transform$treatment_tilde)
# table(sample_data_transform$clustervar,sample_data_transform$treatment)
#
# table(sample_data_transform$clustervar,sample_data_transform$rand_clusters)
# table(sample_data_transform$clustervar,sample_data_transform$rand_obs)
source('~/GitHub/powervarc/powervarc/R/dgp.R')
source('~/GitHub/powervarc/powervarc/R/dgp.R')
library('plm')
library('lmtest')
library('multiwayvcov')
library('miceadds')
#' Randomly assign units to treatment and control groups
#'
#' @param data The dataset to be used
#' @param clustervar The cluster identifier
#' @param p_cluster  The probability that a cluster will be assigned to treatment
#' @param p_individual The probability that an individual will be assigned to treatment
#' for treated individuals
#' @param p_spillover The probability that a control observation in an assigned
#' cluster will be classified as effectively treated.
#' @param
#'
#' @return A dataset with the treatment variables
#' @export
#'
#' @examples
sample_randomize <- function(data,clustervar,p_vec) {
# Extract parameters of interest
p_cluster       <- p_vec[1]
p_individual    <- p_vec[2]
p_spillover     <- p_vec[3]
p_noncompliance <- p_vec[4]
# Identify unique clusters
cluster_id <- data[,c(clustervar)]
unique_cluster_id <- unique(cluster_id)
# Identify number of observations
num_obs      <- dim(data)[1]
num_clusters <- length(unique_cluster_id)
# Randomize
rand_obs      <- rbinom(num_obs,1,p_individual)
rand_clusters <- rbinom(num_clusters,1,p_cluster)
treatment_cluster <- as.data.frame(cbind(unique_cluster_id,rand_clusters))
data <- merge(data,treatment_cluster,by.x=clustervar,by.y="unique_cluster_id")
data$rand_obs  <- rand_obs
data$treatment <- (data$rand_obs)*(data$rand_clusters)
rand_spillover     <- rbinom(num_obs,1,p_spillover)
rand_noncompliance <- rbinom(num_obs,1,1-p_noncompliance)
data$treatment_tilde <- (data$rand_obs)*(data$rand_clusters)*rand_noncompliance +
(1-data$rand_obs)*(data$rand_clusters)*rand_spillover
return(data)
}
sample_outcome <- function(data,treatment_tilde,clustervar,param) {
cluster_id <- data[,c(clustervar)]
unique_cluster_id <- unique(cluster_id)
num_obs      <- dim(data)[1]
num_clusters <- length(unique_cluster_id)
beta    <- param[1]
sigma_e <- param[2]
sigma_u <- param[3]
rand_e <- rnorm(num_obs,0,sigma_e)
rand_u <- rnorm(num_clusters,0,sigma_u)
rand_cluster <- as.data.frame(cbind(unique_cluster_id,rand_u))
data <- merge(data,rand_cluster,by.x=clustervar,by.y="unique_cluster_id")
data$outcome <- data[,c(treatment_tilde)]*beta + data$rand_u + rand_e
return(data)
}
sample_cluster <- function(clustervar,cluster_num,cluster_size) {
unique_cluster_id <- (1:cluster_num)
data <- as.data.frame(kronecker(unique_cluster_id,seq(1,1,length.out=cluster_size)))
names(data) <- c(clustervar)
return(data)
}
simulate_test <- function(s) {
# Simulation parameters
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 10
cluster_size <- 100
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_outcome(sample_data_transform,'treatment_tilde','clustervar',param)
# Carry out hypothesis test
results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
varCov <- data$outcome
return(reject)
}
results <- lapply(rep(0,1000),simulate_test)
mean(unlist(results))
# Diagnostic Statistics
# sum(sample_data_transform$treatment)
#
# table(sample_data_transform$treatment)
# table(sample_data_transform$treatment,sample_data_transform$treatment_tilde)
# table(sample_data_transform$clustervar,sample_data_transform$treatment)
#
# table(sample_data_transform$clustervar,sample_data_transform$rand_clusters)
# table(sample_data_transform$clustervar,sample_data_transform$rand_obs)
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 10
cluster_size <- 100
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_outcome(sample_data_transform,'treatment_tilde','clustervar',param)
# Carry out hypothesis test
results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
varCov <- data$outcome %*% t(data$outcome)
# Simulation parameters
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 10
cluster_size <- 100
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_outcome(sample_data_transform,'treatment_tilde','clustervar',param)
# Carry out hypothesis test
results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
varCov <- data$outcome %*% t(data$outcome)
source('~/GitHub/powervarc/powervarc/R/dgp.R')
# Simulation parameters
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 10
cluster_size <- 100
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_outcome(sample_data_transform,'treatment_tilde','clustervar',param)
# Carry out hypothesis test
results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
varCov <- as.matrix(data$outcome) %*% as.matrix(t(data$outcome))
as.matrix(data$outcome)
data$outcome
varCov <- as.matrix(sample$outcome) %*% as.matrix(t(sample$outcome))
varCo
arCov
varCov
source('~/GitHub/powervarc/powervarc/R/dgp.R')
sample$rand_u
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 10
cluster_size <- 100
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_outcome(sample_data_transform,'treatment_tilde','clustervar',param)
sample$rand_u
source('~/GitHub/powervarc/powervarc/R/dgp.R')
source('~/GitHub/powervarc/powervarc/R/dgp.R')
source('~/GitHub/powervarc/powervarc/R/dgp.R')
source('~/GitHub/powervarc/powervarc/R/dgp.R')
sample
# Simulation parameters
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 1
cluster_size <- 1
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_outcome(sample_data_transform,'treatment_tilde','clustervar',param)
sample
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample
sample
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample_data,'clustervar',p_vec)
sample
source('~/GitHub/powervarc/powervarc/R/dgp.R')
# Simulation parameters
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 1
cluster_size <- 1
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample,'clustervar',p_vec)
sample <- sample_outcome(sample,'treatment_tilde','clustervar',param)
sample
source('~/GitHub/powervarc/powervarc/R/dgp.R')
library('plm')
library('lmtest')
library('multiwayvcov')
library('miceadds')
#' Randomly assign units to treatment and control groups
#'
#' @param data The dataset to be used
#' @param clustervar The cluster identifier
#' @param p_cluster  The probability that a cluster will be assigned to treatment
#' @param p_individual The probability that an individual will be assigned to treatment
#' for treated individuals
#' @param p_spillover The probability that a control observation in an assigned
#' cluster will be classified as effectively treated.
#' @param
#'
#' @return A dataset with the treatment variables
#' @export
#'
#' @examples
sample_randomize <- function(data,clustervar,p_vec) {
# Extract parameters of interest
p_cluster       <- p_vec[1]
p_individual    <- p_vec[2]
p_spillover     <- p_vec[3]
p_noncompliance <- p_vec[4]
# Identify unique clusters
cluster_id <- data[,c(clustervar)]
unique_cluster_id <- unique(cluster_id)
# Identify number of observations
num_obs      <- dim(data)[1]
num_clusters <- length(unique_cluster_id)
# Randomize
rand_obs      <- rbinom(num_obs,1,p_individual)
rand_clusters <- rbinom(num_clusters,1,p_cluster)
treatment_cluster <- as.data.frame(cbind(unique_cluster_id,rand_clusters))
data <- merge(data,treatment_cluster,by.x=clustervar,by.y="unique_cluster_id")
data$rand_obs  <- rand_obs
data$treatment <- (data$rand_obs)*(data$rand_clusters)
rand_spillover     <- rbinom(num_obs,1,p_spillover)
rand_noncompliance <- rbinom(num_obs,1,1-p_noncompliance)
data$treatment_tilde <- (data$rand_obs)*(data$rand_clusters)*rand_noncompliance +
(1-data$rand_obs)*(data$rand_clusters)*rand_spillover
return(data)
}
sample_outcome <- function(data,treatment_tilde,clustervar,param) {
cluster_id <- data[,c(clustervar)]
unique_cluster_id <- unique(cluster_id)
num_obs      <- dim(data)[1]
num_clusters <- length(unique_cluster_id)
beta    <- param[1]
sigma_e <- param[2]
sigma_u <- param[3]
rand_e <- rnorm(num_obs,0,sigma_e)
rand_u <- rnorm(num_clusters,0,sigma_u)
rand_cluster <- as.data.frame(cbind(unique_cluster_id,rand_u))
data <- merge(data,rand_cluster,by.x=clustervar,by.y="unique_cluster_id")
data$outcome <- data[,c(treatment_tilde)]*beta + data$rand_u + rand_e
return(data)
}
sample_cluster <- function(clustervar,cluster_num,cluster_size) {
unique_cluster_id <- (1:cluster_num)
data <- as.data.frame(kronecker(unique_cluster_id,seq(1,1,length.out=cluster_size)))
names(data) <- c(clustervar)
return(data)
}
simulate_test <- function(s) {
# Simulation parameters
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 10
cluster_size <- 10
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample,'clustervar',p_vec)
sample <- sample_outcome(sample,'treatment_tilde','clustervar',param)
# Carry out hypothesis test
results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
sample$rand_u
varCov <- as.matrix(sample$outcome) %*% as.matrix(t(sample$outcome))
return(reject)
}
results <- lapply(rep(0,1000),simulate_test)
mean(unlist(results))
# Diagnostic Statistics
# sum(sample_data_transform$treatment)
#
# table(sample_data_transform$treatment)
# table(sample_data_transform$treatment,sample_data_transform$treatment_tilde)
# table(sample_data_transform$clustervar,sample_data_transform$treatment)
#
# table(sample_data_transform$clustervar,sample_data_transform$rand_clusters)
# table(sample_data_transform$clustervar,sample_data_transform$rand_obs)
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample,'clustervar',p_vec)
sample <- sample_outcome(sample,'treatment_tilde','clustervar',param)
sample
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 10
cluster_size <- 10
param        <- c(0,1,1)
p_vec        <- c(0.5,0.5,0,0)
cluster_num  <- 10
cluster_size <- 10
param        <- c(0,1,1)
# Create simulate
sample <- sample_cluster('clustervar',cluster_num,cluster_size)
sample <- sample_randomize(sample,'clustervar',p_vec)
sample <- sample_outcome(sample,'treatment_tilde','clustervar',param)
sample
results_reg <- miceadds::lm.cluster(sample,outcome ~ treatment_tilde,'clustervar')
tstat       <- coeftest(results_reg)[2,3]
reject      <- 1*(abs(tstat) > 1.96)
coeftest(results_reg)
abs(tstat)
pnorm(0)
1-pnorm(1.96)
source('~/GitHub/powervarc/powervarc/R/dgp.R')
